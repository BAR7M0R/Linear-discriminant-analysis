/******************************************************************************
 * Copyright 2025, Bartłomiej Głodek
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/


#include <catch2/catch_test_macros.hpp>
#include "Percepton.hpp"
#include "Matrix.hpp"
#include "Matrix_tools.hpp"
#include <vector>

TEST_CASE("dummy test 213")
{
    Perceptron p1, p2;


    std::vector<double> learn_raw = {3.8144266, 3.1408618, 2.9314242, 3.8726065, 2.7991343,
                                     2.9712331, 2.9899246, 3.7164442, 3.3328933, 2.7980122,
                                     3.3503776, 2.7659597, 3.8752895, 1.9490618, 3.1965961,
                                     3.5201953, 3.0159823, 2.4443603, 3.4377582, 2.7571081,
                                     8.2361299, 7.9179775, 8.1897815, 7.9408320, 8.2850532,
                                     7.8077388, 8.7585970, 8.4068395, 8.2454110, 7.7947672,
                                     8.2470179, 7.8967625, 8.5565348, 8.2367671, 8.4422348,
                                     7.9438394, 7.8485323, 8.0827851, 7.8620593, 7.7734453,
                                     7.8583425, 6.3518592, 7.1535895, 8.0645842, 6.2639623,
                                     7.7528082, 6.9404923, 6.3945012, 6.2335148, 7.3939719,
                                     8.8992691, 7.4808035, 6.7332612, 8.3553560, 6.5447181,
                                     6.7880562, 7.5954597, 5.5984555, 6.3260672, 7.1114479,
                                     8.1857955, 7.5753454, 8.0952394, 8.0628272, 8.0171618,
                                     8.3959436, 7.8497281, 8.1606651, 7.7560053, 7.5204655,
                                     8.1743464, 6.2800210, 7.7942355, 7.7352592, 8.1809278,
                                     8.1428983, 8.4781442, 7.7639043, 8.0310457, 7.8241749};

    std::vector<double> test_raw = {3.8137763, 2.9384883, 2.5767260, 3.7640738, 2.1616927,
                                    2.6971726, 2.5592656, 2.6945443, 2.7196856, 3.6673663,
                                    3.1324024, 4.2158120, 2.7582760, 2.9638085, 2.9800506,
                                    3.5709559, 3.1055063, 2.9736038, 2.9257849, 3.6257580,
                                    8.1400296, 7.9121522, 8.0364312, 8.7065291, 8.4831815,
                                    7.8786642, 7.9102889, 8.1633368, 7.7131384, 7.9211476,
                                    7.6494355, 7.4045290, 7.8652057, 7.9621387, 8.1673204,
                                    7.9692515, 7.4444975, 8.1951865, 7.7621413, 7.6040966,
                                    7.8568644, 7.3039675, 7.0335654, 7.1075498, 8.0973081,
                                    6.6642917, 6.6224318, 5.9410876, 7.7071424, 7.3463358,
                                    7.2989252, 6.3435369, 6.7566507, 7.1356432, 7.3527441,
                                    6.7552133, 5.7636223, 6.3808125, 7.1491663, 6.8775289,
                                    8.6849043, 7.2090839, 7.3621048, 8.1261248, 7.4217139,
                                    8.4852882, 8.2809817, 7.9099939, 7.4242923, 8.0541655,
                                    8.3092918, 8.1542703, 7.8361553, 7.9193472, 8.5559780,
                                    8.4455130, 8.2447270, 7.4121878, 6.8539136, 7.6065396};
    Matrix<double> learn(2, 40, learn_raw);
    Matrix avr = Matrix_tools::averageRows(learn);
    for(std::size_t r = 0ull; r < learn.getRowsCount(); ++r) {
        for (std::size_t c = 0ull; c < learn.getColsCount(); ++c) {
            learn.at(r, c) -= avr.at(r, 0ull);
        }
    }
    std::vector<double> labels = { 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
                                   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
                                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
    SECTION( "dummy test 213")
    perceptronCriterionAlgorithm(p1, learn, labels, 1000, 0.01);
    relaxationAlgorithm(p2, learn, labels, 1000, 0.01, -1);
    REQUIRE(true == true);
}
